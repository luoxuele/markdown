square bracket
semicolon
question mark
dollar



 [ 2 -eq 2 ] ; echo $?
 test  2 -eq 2  ; echo $?

tokens
Types of tokens include words, keywords, I/O redirectors, and semicolons
metacharacters
    | & ; () <> space,tab,and newline
    pipe
    the ampersand
    the semicolon
    the leeft and right parentheses
    the less than and greather than signs
    the whitespace characters
    space tab
    newline

Control operators
Redirection operators

simple or compound command
interpreted
arguments
ampersand
punctuation


# five steps
tokenisation
command identification
shell expansions
quote removal
redirection

identify unquoted metacharacters

# three quoting
backslashes (\)
single quotes
double quotes ($,backticks `)

# 1. tokenisation
    1. identify unquoted metacharacters
    2. find words and operators

# 2. command identification
    simple command
    compound command

# 3. expansions
Stage 1 : Brace Expansion {}
Stage 2:
    Parameter Expansion
    Arithmetic Expansion
    Command Substitution
    Tilde Expansion
Stage 3: Word Splitting
Stage 4: Globbing 通配符

globbing 
*
?
[
asterisk
question mark   
square brackets

touch file{0..10}.txt file{a,ab,abc}.txt report{1..3}.pdf
ls *.pdf
ls file??.txt
ls file[ab1-3].txt


echo {1..10}.txt

echo $name has $(( 1 + 2 )) apples
echo $name has {1..3} apples and $(( 5 + 2 )) oranges


# redirection
0 stdin
1 stdout
2 stderr



brace expansion 大括号扩展
    ff a{b,c}.txt
    ff a{a..z}.txt
    ff a{0..22}.txt
tilde expansion 波浪线扩展
    ff ~
    ff $HOME
    如果波浪号位于单词的靠头，就用$HOME替换

parameter expansion 参数扩展
    ff $PATH
    ff ${PATH}helloworld

command Substitution    命令替换
    ff $(date)
    ff `date`

arithmetic Substitution 算术替换
    echo $(( 5 - 2 ))
    echo $(( 5 * 2 ))

word splitting
    IFS='年'
    ff $(date)
pathname expansion 路径名扩展
    *
    ？
    [] 


touch text{0..9}.txt text{0..9}{a..g}.txt
ff *.txt
ff text9*.txt
ff text9?.txt
ff ?????.txt
ff /etc/*.conf
ff /etc/[abc]*.conf
[0-9A-Za-z]


# dobule quotes
ff "$PATH $(ls text?.txt)"
ff "$(( 5 + 9 ))"
